geom_boxplot()+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("UBB Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,2200))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 2000,label.size = 12)
View(a)
a <- plotCounts(dds, gene="ENSG00000170315", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count, fill = Condition)) +
geom_boxplot()+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("UBB Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,2200))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 2000,label.size = 12)
a <- plotCounts(dds, gene="ENSG00000170315", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count, fill=Condition)) +
geom_boxplot()+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("UBB Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,2200))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 2000,label.size = 12)
View(a)
a <- plotCounts(dds, gene="ENSG00000170315", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count)) +
geom_boxplot(aes(fill=Condition))+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("UBB Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,2200))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 2000,label.size = 12)
ggsave("UBB Expression.png", dpi=1200, height = 12, width = 6)
a <- plotCounts(dds, gene="ENSG00000170315", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count)) +
geom_boxplot(aes(fill=Condition))+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("UBB Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,2200))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 2000,label.size = 12)
ggsave("UBB Expression.png", dpi=1200)
a <- plotCounts(dds, gene="ENSG00000170315", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count)) +
geom_boxplot(aes(fill=Condition))+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("UBB Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,2200))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 2000,label.size = 8)
ggsave("UBB Expression.png", dpi=1200)
library(DESeq2)
library(tidyverse)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(pheatmap)
library(viridis)
library(ggprism)
library(DESeq2)
library(tidyverse)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(pheatmap)
library(viridis)
library(ggprism)
data <- read.csv(file = "Tutorial_Counts.csv", header = T, row.names = 1) #Load the count data with headers and geneid as row names
meta <- read.csv("Tutorial_Meta.csv", header = T) #load the column data file for Deseq2 with headers
View(data)
View(meta)
View(data)
row.names(data)<- substr(row.names(data), 1, 15) #Removes GeneID Version number from row names
View(data)
data <- data[!duplicated(row.names(data)),] #Removing any duplicated genes
data[is.na(data)] <- 0 #Removing any N/A values
View(meta)
meta$Sample <- as.factor(meta$Sample)  # Changing metadata to factors
meta$Condition <- as.factor(meta$Condition)
mat_data <- as.matrix(data) # This changes the data frame of counts to a data matrix which is required for DEseq2
View(mat_data)
dds <- DESeqDataSetFromMatrix(countData = mat_data,  # Creating the DeseqDataSet
colData = meta,
design = ~ Condition)
View(dds)
dds <- DESeq(dds)  #Running Deseq on DeseqDataSet
vsd <- vst(dds) #Applying VST to prepare data for PCA
plotPCA(vsd, intgroup = c("Condition")) #Plotting a basic PCA with VST data
pcaData <- plotPCA(vsd, intgroup=c("Condition"), returnData=TRUE)    # Plotting a editable ggplot PCA and saving it using ggsave
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=Condition, label = meta$Sample)) +
geom_point(size=3) +
geom_label_repel()+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
library(DESeq2)
library(tidyverse)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(pheatmap)
library(viridis)
library(ggprism)
pcaData <- plotPCA(vsd, intgroup=c("Condition"), returnData=TRUE)    # Plotting a editable ggplot PCA and saving it using ggsave
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=Condition, label = meta$Sample)) +
geom_point(size=3) +
geom_label_repel()+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
pcaData <- plotPCA(vsd, intgroup=c("Condition"), returnData=TRUE)    # Plotting a editable ggplot PCA and saving it using ggsave
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=Condition, label = meta$Sample)) +
geom_point(size=3) +
geom_label_repel()+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
library(DESeq2)
library(tidyverse)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(pheatmap)
library(viridis)
library(ggprism)
library(ggplot2)
pcaData <- plotPCA(vsd, intgroup=c("Condition"), returnData=TRUE)    # Plotting a editable ggplot PCA and saving it using ggsave
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=Condition, label = meta$Sample)) +
geom_point(size=3) +
geom_label_repel()+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
install.packages("ggrepel")
library(DESeq2)
library(tidyverse)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(pheatmap)
library(viridis)
library(ggprism)
library(ggrepel)
pcaData <- plotPCA(vsd, intgroup=c("Condition"), returnData=TRUE)    # Plotting a editable ggplot PCA and saving it using ggsave
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=Condition, label = meta$Sample)) +
geom_point(size=3) +
geom_label_repel()+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
ggsave("PCA of RNA-Seq Samples.png", dpi = 1200)
pcaData <- plotPCA(vsd, intgroup=c("Condition"), returnData=TRUE)    # Plotting a editable ggplot PCA and saving it using ggsave
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=Condition, label = meta$Sample)) +
geom_point(size=3) +
geom_label_repel()+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
ggsave("PCA of RNA-Seq Samples.png", dpi = 1200)
results <- results(dds, contrast = c("Condition", "Disease", "Control"))  # Extracting results from dds object
head(results)
anno <- AnnotationDbi::select(org.Hs.eg.db, rownames(results),            # Creating a gene ID key
columns = c("ENSEMBL", "ENTREZID", "SYMBOL", "GENENAME"),
keytype = "ENSEMBL")
results = cbind(ENSEMBL = rownames(results), results)      # Moving ENSEMBL gene ids to new column in results
anno_results <- left_join(as.data.frame(results), anno)   # Joining Gene ID Key and results data frame
head(anno_results)
results_sig <- anno_results %>%         # Filtering our anno_results data frame to get our significant differentially expressed genes
filter(padj < 0.05, abs(log2FoldChange) > 0.585)
View(results_sig)
write.csv(results_sig, "RNA-Seq Tutorial Significant Genes.csv")  #Saving csv of differentially expressed genes
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-45)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
library(DESeq2)
library(tidyverse)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(pheatmap)
library(viridis)
library(ggprism)
library(ggrepel)
library(EnhancedVolcano)
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-45)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
top_genes <- head(results_sig[order(results_sig$padj), ], 10)  #Extracting top 10 significantly differentially expressed genes
gene_labs <- top_genes$SYMBOL  # Creating a list of their gene symbols
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-45)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot.png", dpi = 1200)
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-45)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot.png", dpi = 1200, height = 12, width = 8)
heatmap_meta <- read.csv("Tutorial_meta.csv", row.names = 1)
row.names(results_sig)<- results_sig$ENSEMBL
setwd("D:/RNAseq Tutorial")
setwd("D:/RNAseq Tutorial/RNAseq Tutorial")
setwd("D:/RNAseq Tutorial/RNAseq Tutorial")
data <- read.csv(file = "Tutorial_Counts.csv", header = T, row.names = 1) #Load the count data with headers and geneid as row names
meta <- read.csv("Tutorial_Meta.csv", header = T) #load the column data file for Deseq2 with headers
library(DESeq2)
library(tidyverse)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(pheatmap)
library(viridis)
library(ggprism)
library(ggrepel)
library(EnhancedVolcano)
View(data)
View(meta)
View(data)
row.names(data)<- substr(row.names(data), 1, 15) #Removes GeneID Version number from row names
View(data)
data <- data[!duplicated(row.names(data)),] #Removing any duplicated genes
data[is.na(data)] <- 0 #Removing any N/A values
meta$Sample <- as.factor(meta$Sample)  # Changing metadata to factors
meta$Condition <- as.factor(meta$Condition)
mat_data <- as.matrix(data) # This changes the data frame of counts to a data matrix which is required for DEseq2
dds <- DESeqDataSetFromMatrix(countData = mat_data,  # Creating the DeseqDataSet
colData = meta,
design = ~ Condition)
View(dds)
dds <- DESeq(dds)  #Running Deseq on DeseqDataSet
vsd <- vst(dds) #Applying VST to prepare data for PCA
plotPCA(vsd, intgroup = c("Condition")) #Plotting a basic PCA with VST data
pcaData <- plotPCA(vsd, intgroup=c("Condition"), returnData=TRUE)    # Plotting a editable ggplot PCA and saving it using ggsave
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=Condition, label = meta$Sample)) +
geom_point(size=3) +
geom_label_repel()+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
ggsave("PCA of RNA-Seq Samples.png", dpi = 1200)
results <- results(dds, contrast = c("Condition", "Disease", "Control"))  # Extracting results from dds object
head(results)
anno <- AnnotationDbi::select(org.Hs.eg.db, rownames(results),            # Creating a gene ID key
columns = c("ENSEMBL", "ENTREZID", "SYMBOL", "GENENAME"),
keytype = "ENSEMBL")
results = cbind(ENSEMBL = rownames(results), results)      # Moving ENSEMBL gene ids to new column in results
anno_results <- left_join(as.data.frame(results), anno)   # Joining Gene ID Key and results data frame
head(anno_results)
results_sig <- anno_results %>%         # Filtering our anno_results data frame to get our significant differentially expressed genes
filter(padj < 0.05, abs(log2FoldChange) > 0.585)
View(results_sig)
write.csv(results_sig, "RNA-Seq Tutorial Significant Genes.csv")  #Saving csv of differentially expressed genes
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-43)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
top_genes <- head(results_sig[order(results_sig$padj), ], 10)  #Extracting top 10 significantly differentially expressed genes
gene_labs <- top_genes$SYMBOL  # Creating a list of their gene symbols
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-43)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot.png", dpi = 1200, height = 12, width = 8)
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-43)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot.png", dpi = 1200, height = 12, width = 8)
setwd("D:/RNAseq Tutorial/RNAseq Tutorial")
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-43)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot.png", dpi = 1200, height = 12, width = 8)
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-43)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot1.png", dpi = 1200, height = 12, width = 8)
anno <- AnnotationDbi::select(org.Hs.eg.db, rownames(results),
columns = c("ENSEMBL", "ENTREZID", "SYMBOL", "GENENAME"),
keytype = "ENSEMBL")
EnhancedVolcano(anno_results, x = "log2FoldChange", y = "padj", lab = anno_results$SYMBOL, selectLab  = c(gene_labs), FCcutoff = 0.585, pCutoff = 0.05, legendPosition = "none", title = "", drawConnectors = T, xlim = c(-3,3), ylim = c(0, -log10(10e-45)), labSize = 5.0, pointSize = 2.0, boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot.png", dpi = 1200)
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-43)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot1.png", dpi = 1200, height = 12, width = 8)
EnhancedVolcano(anno_results, x = "log2FoldChange",
y = "padj",
lab = anno_results$SYMBOL,
selectLab  = c(gene_labs),
FCcutoff = 0.585,
pCutoff = 0.05,
legendPosition = "none",
title = "",
drawConnectors = T,
xlim = c(-3,3),
ylim = c(0, -log10(10e-43)),
labSize = 5.0,
pointSize = 2.0,
boxedLabels = TRUE)
ggsave("RNA-Seq Tutorial Volcano Plot.png", dpi = 1200, height = 12, width = 8)
heatmap_meta <- read.csv("Tutorial_meta.csv", row.names = 1)
row.names(results_sig)<- results_sig$ENSEMBL
results_sig <- results_sig[!duplicated(row.names(results_sig)),]
row.names(results_sig)<- results_sig$ENSEMBL
results_sig <- results_sig[!duplicated(results_sig$ENSEMBL),]
row.names(results_sig)<- results_sig$ENSEMBL
mat <- counts(dds, normalized = T)[rownames(results_sig),]
mat.z <- t(apply(mat, 1, scale))
colnames(mat.z) <- colnames(mat)
pheatmap(mat.z,
show_rownames = F,
show_colnames = T,
annotation_col = heatmap_meta,
annotation_names_row = T,
color = viridis_pal(direction = 1, option = "D")(100),
filename = "RNA-Seq Tutorial Heatmap.png")
View(results_sig)
a <- plotCounts(dds, gene="ENSG00000170315", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count)) +
geom_boxplot(aes(fill=Condition))+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("UBB Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,2200))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 2000,label.size = 8)
df <- data.frame(
Control = "Control",
Disease = "Disease",
label = "adjP = 2.83E-20",
y.position = 2000
)
a <- plotCounts(dds, gene="ENSG00000170315", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count)) +
geom_boxplot(aes(fill=Condition))+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("UBB Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,2200))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 2000,label.size = 8)
ggsave("UBB Expression.png", dpi=1200)
df <- data.frame(
Control = "Control",
Disease = "Disease",
label = "adjP = 2.7E-22",
y.position = 15000
)
a <- plotCounts(dds, gene="ENSG00000101605", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count)) +
geom_boxplot(aes(fill=Condition))+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("MyoM1 Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,15000))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 2000,label.size = 8)
ggsave("Myom1 Expression.png", dpi=1200)
a <- plotCounts(dds, gene="ENSG00000101605", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count)) +
geom_boxplot(aes(fill=Condition))+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("MyoM1 Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,15000))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 15000,label.size = 8)
ggsave("Myom1 Expression.png", dpi=1200)
a <- plotCounts(dds, gene="ENSG00000101605", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count)) +
geom_boxplot(aes(fill=Condition))+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("MyoM1 Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,20000))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 20000,label.size = 8)
ggsave("Myom1 Expression.png", dpi=1200)
a <- plotCounts(dds, gene="ENSG00000101605", intgroup="Condition",
returnData=TRUE)
ggplot(a, aes(x=Condition, y=count)) +
geom_boxplot(aes(fill=Condition))+
geom_jitter(color="black", size=3, alpha=0.9) +
ggtitle("MyoM1 Expression") +
xlab("")+
ylab("Count")+
ylim(c(0,22000))+
add_pvalue(df, xmin = "Control", xmax = "Disease", label = "label", y.position = 20000,label.size = 8)
ggsave("Myom1 Expression.png", dpi=1200)
